version: "3.8"
services:
  postgres_5433:
    image: postgres:latest
    container_name: postgres_5433
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      POSTGRES_DB: order
    ports:
      - "5433:5432"
    volumes:
      - postgres_5433_data:/var/lib/postgresql/data
    networks:
      - app-network

  postgres_5434:
    image: postgres:latest
    container_name: postgres_5434
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      POSTGRES_DB: identity
    ports:
      - "5434:5432"
    volumes:
      - postgres_5434_data:/var/lib/postgresql/data
    networks:
      - app-network

  mongo_27018:
    image: mongo:latest
    container_name: mongo_27018
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: test
    ports:
      - "27018:27017"
    volumes:
      - mongo_27018_data:/data/db
    networks:
      - app-network

  mongo_27019:
    image: mongo:latest
    container_name: mongo_27019
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: test
    ports:
      - "27019:27017"
    volumes:
      - mongo_27019_data:/data/db
    networks:
      - app-network

  mysql_3307:
    image: mysql:latest
    container_name: mysql_3307
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: test
      MYSQL_DATABASE: customer
      MYSQL_USER: mysql
      MYSQL_PASSWORD: test
    ports:
      - "3307:3306"
    volumes:
      - mysql_3307_data:/var/lib/mysql
    networks:
      - app-network

  kafka:
    image: bitnami/kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2
    networks:
      - app-network

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8079:8079"
    networks:
      - app-network

  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: discovery-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
    networks:
      - app-network
    depends_on:
      - config-server

  gateway-server:
    build:
      context: ./gateway-server
      dockerfile: Dockerfile
    container_name: gateway-server
    ports:
      - "8081:8081"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
    networks:
      - app-network
    depends_on:
      - config-server
      - discovery-server

  cart-service:
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    container_name: cart-service
    ports:
      - "8140:8140"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
    networks:
      - app-network
    depends_on:
      - config-server
      - discovery-server
      - mongo_27019
      - kafka

  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    container_name: customer-service
    ports:
      - "8090:8090"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
    networks:
      - app-network
    depends_on:
      - config-server
      - discovery-server
      - mysql_3307
      - kafka

  identity-service:
    build:
      context: ./identity-service
      dockerfile: Dockerfile
    container_name: identity-service
    ports:
      - "8100:8100"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
    networks:
      - app-network
    depends_on:
      - config-server
      - discovery-server
      - postgres_5434
      - kafka

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8110:8110"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
    networks:
      - app-network
    depends_on:
      - config-server
      - discovery-server
      - kafka

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8120:8120"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
    networks:
      - app-network
    depends_on:
      - config-server
      - discovery-server
      - postgres_5433
      - kafka

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "8130:8130"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
    networks:
      - app-network
    depends_on:
      - config-server
      - discovery-server
      - mongo_27018
      - kafka

networks:
  app-network:
    driver: bridge

volumes:
  postgres_5433_data:
  postgres_5434_data:
  mongo_27018_data:
  mongo_27019_data:
  mysql_3307_data:
