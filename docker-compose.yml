version: '3.8'
services:
  postgres_5433:
    image: postgres:latest
    container_name: postgres_5433
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      POSTGRES_DB: order
    ports:
      - "5433:5432"
    volumes:
      - postgres_5433_data:/var/lib/postgresql/data

  postgres_5434:
    image: postgres:latest
    container_name: postgres_5434
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      POSTGRES_DB: identity
    ports:
      - "5434:5432"
    volumes:
      - postgres_5434_data:/var/lib/postgresql/data

  mongo_27018:
    image: mongo:latest
    container_name: mongo_27018
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: test
    ports:
      - "27018:27017"
    volumes:
      - mongo_27018_data:/data/db

  mongo_27019:
    image: mongo:latest
    container_name: mongo_27019
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: test
    ports:
      - "27019:27017"
    volumes:
      - mongo_27019_data:/data/db

  mysql_3307:
    image: mysql:latest
    container_name: mysql_3307
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: test
      MYSQL_DATABASE: customer
      MYSQL_USER: mysql
      MYSQL_PASSWORD: test
    ports:
      - "3307:3306"
    volumes:
      - mysql_3307_data:/var/lib/mysql
  kafka:
    image: bitnami/kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,EXTERNAL://localhost:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2
  discovery-server: #mvn spring-boot:build-image -Dspring-boot.build-image.imageName=discovery-server
    image: discovery-server
    container_name: discovery-server
    ports:
      - "8888:8888"
    networks:
      - app-network
  gateway-server: #mvn spring-boot:build-image -Dspring-boot.build-image.imageName=gateway-server
    image: gateway-server
    container_name: gateway-server
    ports:
      - "8081:8081"
    networks:
      - app-network
    depends_on:
      - discovery-server
  cart-service: #mvn spring-boot:build-image -Dspring-boot.build-image.imageName=cart-service
    image: cart-service
    container_name: cart-service
    ports:
      - "8140:8140"
    environment:
      SPRING_DATASOURCE_URL: "mongodb://mongouser:test@mongo_27019_data:27019/cart?authSource=admin"
    networks:
      - app-network
    depends_on:
      - discovery-server
  customer-service: #mvn spring-boot:build-image -Dspring-boot.build-image.imageName=customer-service
      image: customer-service
      container_name: customer-service
      ports:
        - "8140:8140"
      environment:
        SPRING_DATASOURCE_URL: "jdbc:mysql://mysql_3307_data:3307/customer?useSSL=false&serverTimezone=UTC"
      networks:
        - app-network
      depends_on:
        - discovery-server
  identity-service: #mvn spring-boot:build-image -Dspring-boot.build-image.imageName=identity-service
      image: identity-service
      container_name: identity-service
      ports:
        - "8140:8140"
      environment:
        SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres_5434_data:5434/identity"
      networks:
        - app-network
      depends_on:
        - discovery-server
  notification-service: #mvn spring-boot:build-image -Dspring-boot.build-image.imageName=notification-service
      image: notification-service
      container_name: notification-service
      ports:
        - "8140:8140"
      networks:
        - app-network
      depends_on:
        - discovery-server
  order-service: #mvn spring-boot:build-image -Dspring-boot.build-image.imageName=order-service
      image: order-service
      container_name: order-service
      ports:
        - "8140:8140"
      environment:
        SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres_5433:5432/order"
      networks:
        - app-network
      depends_on:
        - discovery-server
  product-service: #mvn spring-boot:build-image -Dspring-boot.build-image.imageName=product-service
      image: product-service
      container_name: product-service
      ports:
        - "8130:8130"
      environment:
        SPRING_DATASOURCE_URL: "mongodb://mongouser:test@mongo_27018_data:27018/product?authSource=admin"
      networks:
        - app-network
      depends_on:
        - discovery-server

networks:
  app-network:
    driver: bridge
volumes:
  postgres_5433_data:
  postgres_5434_data:
  mongo_27018_data:
  mongo_27019_data:
  mysql_3307_data:
